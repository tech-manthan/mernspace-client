"use client";

import { useRef, useCallback, useEffect, useState, useMemo } from "react";
import { ScrollArea, ScrollBar } from "@/components/ui/scroll-area";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useGetInfiniteCategories } from "@/hooks/useGetInfiniteCatgories";
import ProductsGrid from "./products-grid";

const ProductList = () => {
  const scrollAreaRef = useRef<HTMLDivElement | null>(null);
  const observer = useRef<IntersectionObserver | null>(null);

  const { data, fetchNextPage, hasNextPage, isFetchingNextPage } =
    useGetInfiniteCategories("");

  const categories = useMemo(() => {
    return data?.pages.flatMap((page) => page.data) ?? [];
  }, [data]);

  const [activeCategory, setActiveCategory] = useState("");

  const lastCategoryRef = useCallback(
    (node: HTMLButtonElement | null) => {
      if (!node || isFetchingNextPage) return;
      if (observer.current) observer.current.disconnect();

      observer.current = new IntersectionObserver((entries) => {
        if (entries[0].isIntersecting && hasNextPage && !isFetchingNextPage) {
          fetchNextPage();
        }
      });

      observer.current.observe(node);
    },
    [fetchNextPage, hasNextPage, isFetchingNextPage]
  );

  useEffect(() => {
    if (categories.length > 0 && !activeCategory) {
      setActiveCategory(categories[0]._id);
    }
  }, [categories, activeCategory]);

  useEffect(() => {
    return () => observer.current?.disconnect();
  }, []);

  return (
    <Tabs
      value={activeCategory}
      onValueChange={setActiveCategory}
      className="border-0"
    >
      <ScrollArea ref={scrollAreaRef} className="w-full overflow-x-auto">
        <TabsList className="flex">
          {categories.map((cat, i) => (
            <TabsTrigger
              key={cat._id}
              value={cat._id}
              ref={i === categories.length - 1 ? lastCategoryRef : null}
              className="cursor-pointer"
            >
              {cat.name}
            </TabsTrigger>
          ))}
        </TabsList>
        <ScrollBar orientation="horizontal" hidden />
      </ScrollArea>

      {categories.map((cat) => (
        <TabsContent key={cat._id} value={cat._id}>
          <ProductsGrid activeCategory={activeCategory} />
        </TabsContent>
      ))}
    </Tabs>
  );
};

export default ProductList;




"use client";

import { useState, useMemo, useEffect } from "react";
import { Popover, PopoverContent, PopoverTrigger } from "../ui/popover";
import { Button } from "../ui/button";
import { cn } from "@/lib/utils";
import { ChevronsUpDown, Check, X } from "lucide-react";
import { debounce } from "lodash";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "../ui/command";
import { useGetInfiniteRestaurants } from "@/hooks/useGetInfiniteRestaurants";

export default function SelectRestaurant() {
  const [open, setOpen] = useState(false);
  const [selectedId, setSelectedId] = useState<number | null>(null);
  const [search, setSearch] = useState("");
  const [inputValue, setInputValue] = useState("");

  const { data, fetchNextPage, isFetchingNextPage } =
    useGetInfiniteRestaurants(search);

  const restaurants = data?.pages.flatMap((page) => page.data) ?? [];
  const total = data?.pages[0]?.total ?? 0;

  const debouncedSetSearch = useMemo(
    () =>
      debounce((val: string) => {
        setSearch(val);
      }, 500),
    []
  );

  const handleInputChange = (val: string) => {
    setInputValue(val);
    debouncedSetSearch(val);
  };

  useEffect(() => {
    return () => debouncedSetSearch.cancel(); // cleanup
  }, [debouncedSetSearch]);

  const loadMore = () => {
    if (restaurants.length < total && !isFetchingNextPage) {
      fetchNextPage();
    }
  };

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className="w-[200px] justify-between border-2 focus:ring-2 ring-primary"
        >
          {selectedId
            ? restaurants.find((r) => r.id === selectedId)?.name
            : "Select Restaurant"}
          <ChevronsUpDown className="opacity-50" />
        </Button>
      </PopoverTrigger>

      <PopoverContent className="w-[200px] p-0">
        <Command shouldFilter={false}>
          <div className="relative">
            <CommandInput
              placeholder="Search restaurants..."
              className="h-9 pr-7"
              value={inputValue}
              onValueChange={handleInputChange}
            />
            {search && (
              <button
                type="button"
                onClick={() => {
                  setSearch(""); // reset search
                }}
                className="absolute right-2 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground"
              >
                <X className="w-4 h-4" />
              </button>
            )}
          </div>

          <CommandList
            className="max-h-48 overflow-y-auto"
            onScroll={(e) => {
              const target = e.currentTarget;
              if (
                target.scrollHeight - target.scrollTop <=
                target.clientHeight + 2
              ) {
                loadMore();
              }
            }}
          >
            {restaurants.length === 0 && !isFetchingNextPage && (
              <CommandEmpty>No Restaurant found.</CommandEmpty>
            )}
            {restaurants.length === 0 && isFetchingNextPage && (
              <CommandEmpty>Loading...</CommandEmpty>
            )}

            <CommandGroup key={restaurants.length}>
              {restaurants.map((restaurant) => (
                <CommandItem
                  key={restaurant.id}
                  value={String(restaurant.id)}
                  onSelect={(val) => {
                    const id = Number(val);
                    setSelectedId(id === selectedId ? null : id);
                    setOpen(false);
                  }}
                >
                  {restaurant.name}
                  <Check
                    className={cn(
                      "ml-auto",
                      selectedId === restaurant.id
                        ? "opacity-100 text-primary"
                        : "opacity-0"
                    )}
                  />
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  );
}
